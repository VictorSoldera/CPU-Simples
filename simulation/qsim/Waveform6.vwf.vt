// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/22/2019 10:37:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [0:9] Instrucao;
// wires                                               
wire [0:7] Regi0;
wire [0:7] Regi1;
wire [0:7] Regi2;
wire [0:7] Regi3;
wire [0:7] Regi4;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Instrucao(Instrucao),
	.Regi0(Regi0),
	.Regi1(Regi1),
	.Regi2(Regi2),
	.Regi3(Regi3),
	.Regi4(Regi4)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
initial
begin
	repeat(16)
	begin
		Clock = 1'b0;
		Clock = #30000 1'b1;
		# 30000;
	end
	Clock = 1'b0;
	Clock = #30000 1'b1;
end 
// Instrucao[ 9 ]
initial
begin
	Instrucao[9] = 1'b0;
	Instrucao[9] = #300000 1'b1;
	Instrucao[9] = #240000 1'b0;
	Instrucao[9] = #240000 1'b1;
	Instrucao[9] = #120000 1'b0;
end 
// Instrucao[ 8 ]
initial
begin
	Instrucao[8] = 1'b1;
	Instrucao[8] = #780000 1'b0;
	Instrucao[8] = #120000 1'b1;
end 
// Instrucao[ 7 ]
initial
begin
	Instrucao[7] = 1'b0;
	Instrucao[7] = #300000 1'b1;
	Instrucao[7] = #240000 1'b0;
end 
// Instrucao[ 6 ]
initial
begin
	Instrucao[6] = 1'b0;
end 
// Instrucao[ 5 ]
initial
begin
	Instrucao[5] = 1'b0;
	Instrucao[5] = #120000 1'b1;
	Instrucao[5] = #180000 1'b0;
end 
// Instrucao[ 4 ]
initial
begin
	Instrucao[4] = 1'b0;
	Instrucao[4] = #780000 1'b1;
	Instrucao[4] = #120000 1'b0;
end 
// Instrucao[ 3 ]
initial
begin
	Instrucao[3] = 1'b0;
	Instrucao[3] = #120000 1'b1;
	Instrucao[3] = #420000 1'b0;
end 
// Instrucao[ 2 ]
initial
begin
	Instrucao[2] = 1'b1;
	Instrucao[2] = #120000 1'b0;
	Instrucao[2] = #180000 1'b1;
	Instrucao[2] = #240000 1'b0;
	Instrucao[2] = #360000 1'b1;
end 
// Instrucao[ 1 ]
initial
begin
	Instrucao[1] = 1'b1;
	Instrucao[1] = #120000 1'b0;
	Instrucao[1] = #180000 1'b1;
	Instrucao[1] = #240000 1'b0;
	Instrucao[1] = #360000 1'b1;
end 
// Instrucao[ 0 ]
initial
begin
	Instrucao[0] = 1'b0;
	Instrucao[0] = #540000 1'b1;
	Instrucao[0] = #240000 1'b0;
end 
endmodule

